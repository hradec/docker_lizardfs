#
#


version: '3'
services:

  lfsmaster:
    build: .
    image: hradec/docker_lizardfs    
    restart: always 
    network_mode: host
    volumes:
      # very important path - where metadata will be saved!!!! 
      - ./mfs_master:/var/lib/mfs:rw 
    environment:
      # set the mfsmaster IP and port 
      - MASTER_HOST=${MASTER}
      - MASTER_PORT=9420
      # instruct the image as what server it has to impersonate!
      - ACTION=master
      # ssh port to access this container without using docker
      - SSH_PORT=2200
      # Just use MFS_ prefix to env vars to set options to configuration files. 
      # no atime avoids from writing to chunks if access time changes!
      - MFS_NO_ATIME=1
      # Don't swap memory
      - MFS_LOCK_MEMORY=1
      # use the load factor of a chunk to select what chunk to use!
      - MFS_ENABLE_LOAD_FACTOR=0
      # number of backups of metadata
      - MFS_BACK_META_KEEP_PREVIOUS=16
      # for master to recover metadata in case of unexpected reboot
      - MFS_AUTO_RECOVERY=1
      # here is the setup for the master to evaluate deletion and replication of blocks
      # min/max number of chunks to be deleted (there's a relation with CHUNKS_WRITE_REP_LIMIT for deletion speed)
      - MFS_CHUNKS_HARD_DEL_LIMIT=40
      - MFS_CHUNKS_SOFT_DEL_LIMIT=10
      # the maximun CPU mfsmaster can use for the chunk loop (rebalancing analises)
      - MFS_CHUNKS_LOOP_MAX_CPU=90
      # the time to check all chunks in the master 
      # analise CHUNKS_LOOP_MAX_CPS chunks in CHUNKS_LOOP_MIN_TIME seconds (CHUNKS_LOOP_MIN_TIME/CHUNKS_LOOP_MAX_CPS chunks = time to analize 1 chunk)
      # this analises will repeate every MFS_CHUNKS_LOOP_PERIOD seconds!
      # ex: MFS_CHUNKS_LOOP_MAX_CPS=10  and   MFS_CHUNKS_LOOP_MIN_TIME=300 
      #     300/10=30, so mfsmaster will analise 1 chunk every 30 seconds for rebalance
      - MFS_CHUNKS_LOOP_MAX_CPS=1000
      - MFS_CHUNKS_LOOP_MIN_TIME=10 
      - MFS_CHUNKS_LOOP_PERIOD=100
      # max number of write/read to perform when rebalancing (replication and delete)
      - MFS_CHUNKS_WRITE_REP_LIMIT=5
      - MFS_CHUNKS_READ_REP_LIMIT=60
      # priority for chunks that can be lost if one more drive disapears
      - MFS_ENDANGERED_CHUNKS_PRIORITY=0.50
      # the maximum difference in space from one disk/chunkserver to another
      # mfsmaster will keep rebalancing until this percentage is met!
      - MFS_ACCEPTABLE_DIFFERENCE=0.1
      # force rebalancing disks between chunks!
      - MFS_CHUNKS_REBALANCING_BETWEEN_LABELS = 1
      # custom paths for goals/topology/export config files!
      - MFS_CUSTOM_GOALS_FILENAME=/var/lib/mfs/mfsgoals.cfg
      - MFS_TOPOLOGY_FILENAME=/var/lib/mfs/mfstopology.cfg
      - MFS_EXPORTS_FILENAME=/etc/mfs/mfsexports.cfg
      # not sure!
      - MFS_REDUNDANCY_LEVEL=1
      # this is the time between chunk test loop. Theres a HUGE impact in performance 
      # denpending on the speed of the disks. 
      - MFS_FILE_TEST_LOOP_MIN_TIME=86400 # test files every 24 hours!!
      # don't reject old clients!!
      - MFS_REJECT_OLD_CLIENTS=0
    
    #healthcheck:
    #  test: ["CMD", "curl", "-f", "http://localhost"]
    #  interval: 1m30s
    #  timeout: 10s
    #  retries: 3
    #  start_period: 40s

  lfsmeta:
    image: hradec/docker_lizardfs    
    restart: always 
    network_mode: host
    environment:
      # set the mfsmaster IP and port 
      - MASTER_HOST=${MASTER}
      - MASTER_PORT=9420
      # instruct the image as what server it has to impersonate!
      - ACTION=meta
      # ssh port to access this container without using docker
      - SSH_PORT=2201

  lfscgi:
    image: hradec/docker_lizardfs    
    restart: always 
    network_mode: host
    environment:
      # set the mfsmaster IP and port 
      - MASTER_HOST=${MASTER}
      - MASTER_PORT=9420
      # instruct the image as what server it has to impersonate!
      - ACTION=CGI
      # ssh port to access this container without using docker
      - SSH_PORT=2202

  lfschunk:
    image: hradec/docker_lizardfs    
    restart: always 
    network_mode: host
    volumes:
      # set a local folder to store chunk server statistics
      - ./mfs_chunk:/var/lib/mfs:rw 
      # now we set the disk paths to use as chunkserver storage
      - ./mfs_chunkStorage1:/mnt/storage1
      - ./mfs_chunkStorage2:/mnt/storage2
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
    environment:
      # set the mfsmaster IP and port 
      - MASTER_HOST=${MASTER}
      - MASTER_PORT=9420
      # instruct the image as what server it has to impersonate!
      - ACTION=CHUNK
      - MFS_LABEL=chunk 
      # port needs to change if you run more than one chunk on the same machine
      - MFS_CSSERV_LISTEN_PORT=9460 
      # swap or not swap chunk memory?!
      - MFS_LOCK_MEMORY=0   
      # number of threads to respond to requests. 
      - MFS_NR_OF_NETWORK_WORKERS=1
      # number of HDD threads (1 makes start really slow when chunkserver checks what chunks are available!)
      - MFS_NR_OF_HDD_WORKERS_PER_NETWORK_WORKER=10
      # if the chunkserver runs more than just one chunkserver, it's better to avoid from 
      # making the kernel cache the disks in memory
      - MFS_HDD_ADVISE_NO_CACHE=1
      # not sure, but it seems to improve free disk space aparently? 
      - MFS_HDD_PUNCH_HOLES=1
      # make chunkserver wait to make sure data has being written to disk. 
      - MFS_PERFORM_FSYNC=1
      # maximum bandwidth that can be used by chunkserver
      - MFS_REPLICATION_BANDWIDTH_LIMIT_KBPS=102400
      # time in between chunk md5 checks
      - MFS_HDD_TEST_FREQ=3600
      # ssh port to access this container without using docker
      - SSH_PORT=2203


